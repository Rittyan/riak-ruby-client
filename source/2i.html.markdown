---
title: Secondary Indexes
---
Secondary indexes, commonly called "2i," are a way to add and query specific
tags on objects. It requires the `memory` or `leveldb` backend. It will work
with the `multi` backend configured to use `memory` or `leveldb` for your
specific objects.

Check out the Riak docuentation on [using secondary indexes][1] and a few
[notes about 2i implementation][2].

[1]: http://docs.basho.com/riak/latest/dev/using/2i/
[2]: http://docs.basho.com/riak/latest/dev/advanced/2i/

## tl;dr

Tagging and simple querying:

```ruby
# #indexes is a hash of arrays
# keys are postfixed with _bin for binary/string indexes, _int for integers
# values are arrays
cobb_salad.indexes['ingredients_bin'] = %w{lettuce tomato bacon egg chives}
cobb_salad.indexes['calories_int'] = [220]
cobb_salad.store

# integer indexes can be queried for match or range
bucket.get_index 'calories_int', 220 #=> ['cobb_salad']
bucket.get_index 'calories_int', (0..300) #=> ['cobb_salad']

# bin indexes can be queried for match or range too
bucket.get_index 'ingredients_bin', 'lettuce' #=> ['cobb_salad']
bucket.get_index 'ingredients_bin', 'tomata'..'tomatz' #=> ['cobb_salad']
```

Paginated queries:

```ruby
page_1 = bucket.get_index 'ingredients_bin', 'lettuce', max_results: 5
page_1.length #=> 5
page_1.continuation #=> "g2gCbQAAA="

page_2 = bucket.get_index('ingredients_bin', 'lettuce',
                      max_results: 5,
                      continuation: page_1.continuation)
```

## Tagging

Each `RObject` has an `indexes` accessor that's a Hash of `String` keys to
`Array` values. Keys must end with an underscore and the type of index they are:
`_bin` for binary/`String` indexes, or `_int` for `Integer` indexes. The values
must be an array of the appropriate index members. One object can have multiple
keys in the same index.

Indexes are not saved until the entire object is stored.

```ruby
# allow finding this salad by any of its ingredients
cobb_salad.indexes['ingredients_bin'] = %w{lettuce tomato bacon egg chives}

# allow finding this salad by how many calories it has per serving
cobb_salad.indexes['calories_int'] = [220]

# actually store the indexes
cobb_salad.store
```

### Tagging and Conflict Resolution

The `indexes` hash is actually on the `RContent` object. You can merge or
otherwise process conflicting indexes during [conflict resolution:][1]

[1]:kv.html#toc-content-and-conflict

```ruby
if salad.conflict?
  salad.siblings.inject do |merged_salad, current_salad|
    # merging the salad data is left as an exercise for the reader

    merged_salad.indexes['ingredients_bin'] = (
      merged_salad.indexes['ingredients_bin'] +
      current_salad.indexes['ingredients_bin']
      ).uniq

    next merged_salad
  end
end
```
